#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <strings.h>
#include <netinet/in.h>
#include <netdb.h>
#include <signal.h>
#include <string.h>
#include <fcntl.h>
#include "strhelpers.h"
#define MAXTEXT 1024

// Definition des prototypes de fonctions appelees dans le fichier
void write_header(int sock, char * username);
void print_msg(char * chat);
void recv_img(int sock, long img_size);

void envoyer_image(char * input)
{

	char c;
	char *chat =  malloc(MAXTEXT);
	char *begchat = chat;
	long img_size ;
	int i;
	char *msgclient = malloc(MAXTEXT);

	while (c!=EOF) {
		if (startswith("envoie", input)) {
			char *input_final=ToStringHis(nbOfArgTab,argtab);
							
			write(sock,input_final,sizeof(char)*strlen(input_final));
			write(sock,end,sizeof(char)*strlen(end));

			printf("Je vais recevoir une image\n");
			read(sock, &img_size, sizeof(long));
			printf("Taille de l'image a recevoir : %ld\n", img_size);
			recv_img(sock, img_size);
		}
//??? sert a quoi
		if (startswith("transforme", input)) {
			printf("Je transforme une image : %s\n", input);
		}

	}	
	close(sock);
	close(sock_talk);	   
	return 0;
}


void recv_img(int sock, long img_size) {
	char *buffer = malloc(img_size);
	int readdata = 1;
	int total = 0;
	char *startbuffer = buffer;
	do
	{	 
		readdata = read(sock, buffer, img_size);
		buffer += readdata*sizeof(char);
		total+=readdata;
	} while (total<img_size && readdata != -1);

	buffer = startbuffer;
	printf("Copie terminee : lu %d octets , \n", total);
	int fd = open("output/testsortie.tga", O_CREAT|O_RDWR);
	write(fd, buffer, img_size); 
	close(fd);
	free(buffer);
}

void print_msg(char * chat) {
  fputs("reply: ", stdout);
  fputs(chat, stdout);
}

void write_header(int sock, char * username) {
  int loglen = strlen(username);
  write(sock, &loglen, sizeof(int));
  write(sock, username, sizeof(char)*loglen);
}

